---
import { getAllCompanies } from "@/domain/company/lib";
import type { CollectionEntry } from "astro:content";

interface Props {
  items: CollectionEntry<"caseStudies">[];
  showCompany?: boolean;
}

const { showCompany } = Astro.props;

const items = Astro.props.items.sort(
  (a, b) => b.data.publishedAt.getTime() - a.data.publishedAt.getTime()
);

const allCompanies = await getAllCompanies();
const companiesById = Object.fromEntries(
  allCompanies.map((item) => [item.id, item])
);

const dateFormatter = new Intl.DateTimeFormat("en-US", {
  year: "numeric",
  month: "long",
});
---

<ul>
  {
    items.map((caseStudy) => (
      <li>
        <div>
          <a href={caseStudy.id}>{caseStudy.data.title}</a>
          {showCompany ? (
            <a
              class="company novisited muted"
              href={`/companies/${caseStudy.data.company}`}
            >
              {companiesById[caseStudy.data.company].data.name}
            </a>
          ) : null}
        </div>

        <time class="muted" datetime={caseStudy.data.publishedAt.toISOString()}>
          {dateFormatter.format(caseStudy.data.publishedAt)}
        </time>
      </li>
    ))
  }
</ul>

<style>
  ul {
    display: contents;
  }

  li {
    margin-block: 1.5rem;
  }

  .company {
    display: table;
    color: var(--color-muted);
    text-decoration: none;
  }

  @media (min-width: 66rem) {
    li {
      display: grid;
      grid-template-columns: subgrid;
      grid-column: full;
      margin-block: 1.5rem 0;
    }

    li > a {
      grid-column: main;
    }

    time {
      text-align: right;
      grid-column: full-start / main-start;
      grid-row: 1 / 1;
    }
  }
</style>
